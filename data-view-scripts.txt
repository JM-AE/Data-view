import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

class DataDashboard:
    def __init__(self, root):
        self.root = root
        self.root.title("Data Handling Dashboard")
        self.data = None

        # Create main frames
        self.create_buttons()
        self.create_display_area()

    def create_buttons(self):
        button_frame = tk.Frame(self.root)
        button_frame.pack(side=tk.TOP, fill=tk.X)

        tk.Button(button_frame, text="Load Data", command=self.load_data).pack(side=tk.LEFT, padx=5, pady=5)
        tk.Button(button_frame, text="Describe Data", command=self.describe_data).pack(side=tk.LEFT, padx=5, pady=5)
        tk.Button(button_frame, text="Visualize Data", command=self.visualize_data).pack(side=tk.LEFT, padx=5, pady=5)
        tk.Button(button_frame, text="Manipulate Data", command=self.manipulate_data).pack(side=tk.LEFT, padx=5, pady=5)

    def create_display_area(self):
        self.text_area = tk.Text(self.root, wrap=tk.WORD, height=20, width=100)
        self.text_area.pack(side=tk.BOTTOM, fill=tk.BOTH, expand=True, padx=5, pady=5)

    def load_data(self):
        file_path = filedialog.askopenfilename(filetypes=[("CSV Files", "*.csv"), ("Excel Files", "*.xlsx")])
        if file_path:
            try:
                if file_path.endswith(".csv"):
                    self.data = pd.read_csv(file_path)
                elif file_path.endswith(".xlsx"):
                    self.data = pd.read_excel(file_path)
                self.text_area.delete(1.0, tk.END)
                self.text_area.insert(tk.END, "Data loaded successfully.\n")
                self.text_area.insert(tk.END, f"Data preview:\n{self.data.head()}\n")
            except Exception as e:
                messagebox.showerror("Error", f"Failed to load data: {str(e)}")

    def describe_data(self):
        if self.data is not None:
            self.text_area.delete(1.0, tk.END)
            self.text_area.insert(tk.END, f"Data Description:\n{self.data.describe()}\n")
        else:
            messagebox.showwarning("No Data", "Please load data first.")

    def visualize_data(self):
        if self.data is not None:
            options = ["Table", "Histogram", "Correlation Matrix", "Pie Chart"]
            option = tk.simpledialog.askstring("Visualization Options", f"Choose one: {', '.join(options)}")
            
            if option == "Table":
                self.text_area.delete(1.0, tk.END)
                self.text_area.insert(tk.END, f"Data Table:\n{self.data.head()}\n")
            elif option == "Histogram":
                column = tk.simpledialog.askstring("Column", "Enter column name for histogram:")
                if column in self.data.columns:
                    plt.figure(figsize=(8, 6))
                    sns.histplot(self.data[column], kde=True)
                    plt.title(f"Histogram of {column}")
                    plt.show()
            elif option == "Correlation Matrix":
                plt.figure(figsize=(8, 6))
                sns.heatmap(self.data.corr(), annot=True, cmap="coolwarm")
                plt.title("Correlation Matrix")
                plt.show()
            elif option == "Pie Chart":
                column = tk.simpledialog.askstring("Column", "Enter column name for pie chart:")
                if column in self.data.columns:
                    self.data[column].value_counts().plot.pie(autopct='%1.1f%%', figsize=(8, 6))
                    plt.title(f"Pie Chart of {column}")
                    plt.show()
        else:
            messagebox.showwarning("No Data", "Please load data first.")

    def manipulate_data(self):
        if self.data is not None:
            options = ["Drop NA", "Fill NA"]
            option = tk.simpledialog.askstring("Manipulation Options", f"Choose one: {', '.join(options)}")
            if option == "Drop NA":
                self.data = self.data.dropna()
                messagebox.showinfo("Manipulation", "Missing values dropped.")
            elif option == "Fill NA":
                fill_value = tk.simpledialog.askstring("Fill Value", "Enter value to fill missing data:")
                self.data = self.data.fillna(fill_value)
                messagebox.showinfo("Manipulation", "Missing values filled.")
        else:
            messagebox.showwarning("No Data", "Please load data first.")

if __name__ == "__main__":
    root = tk.Tk()
    app = DataDashboard(root)
    root.mainloop()
